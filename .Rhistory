}
mergeCompatibleTables(x)
.GlobalEnv
mergeCompatibleTables <- function(x){
mylist =  do.call("list", mget(grep(x, ls(), value=T)),envir=as.environment(R_GlobalEnv))
mergedDF <- do.call(rbind, mylist)
return(mergedDF)
}
mergeCompatibleTables(x)
search()
is.environment(.GlobalEnv)
environmentName()
environment()
mergeCompatibleTables <- function(x){
environment()
mylist =  do.call("list", mget(grep(x, ls(), value=T)))
mergedDF <- do.call(rbind, mylist)
return(mergedDF)
}
mergeCompatibleTables(x)
mergeCompatibleTables <- function(x){
print(environment())
mylist =  do.call("list", mget(grep(x, ls(), value=T)))
mergedDF <- do.call(rbind, mylist)
return(mergedDF)
}
mergeCompatibleTables(x)
mergeCompatibleTables <- function(x){
print(environment())
mylist =  do.call("list", mget(grep(x, ls(), value=T)), envir = as.environment(0x000000003d39e568))
mergedDF <- do.call(rbind, mylist)
return(mergedDF)
}
mergeCompatibleTables(x)
search()
environmentName(mergeCompatibleTables())
mergeCompatibleTables <- function(x){
mylist =  do.call("list", mget(grep(x, ls(), value=T)))
mergedDF <- do.call(rbind, mylist)
return(mergedDF)
}
mergeCompatibleTables(x)
mylist <-  do.call("list", mget(grep(x, ls(), value=T)))
mergeCompatibleTables <- function(x){
mylist <-  do.call("list", mget(grep(x, ls(), value=T)))
mergedDF <- do.call(rbind, mylist)
return(mergedDF)
}
mergeCompatibleTables(x)
mergeCompatibleTables(x)
mergedDF <- mergeCompatibleTables(x)
mylist <-  do.call("list", mget(grep(x, ls(), value=T)))
mergedDF <- do.call(rbind, mylist)
mylist <-   mget(grep(x, ls(), value=T))
mergeCompatibleTables <- function(x){
mylist <-   mget(grep(x, ls(), value=T))
mergedDF <- do.call(rbind, mylist)
return(mergedDF)
}
mergedDF <- mergeCompatibleTables(x)
mylist <-   mget(grep(x, ls(), value=T))
mergedDF <- do.call(rbind, mylist)
?ls
mylist <-   mget(grep(x,  value=T))
.Ob <- 1
ls(pattern = "O")
ls(pattern= "O", all.names = TRUE)
mergeCompatibleTables <- function(x){
mylist <-   mget(grep(x, ls(all.names = TRUE), value=T))
mergedDF <- do.call(rbind, mylist)
return(mergedDF)
}
mergeCompatibleTables(x)
ls()
mergeCompatibleTables <- function(x){
print(ls())
mylist <-   mget(grep(x, ls(), value=T))
mergedDF <- do.call(rbind, mylist)
return(mergedDF)
}
mergeCompatibleTables
mergeCompatibleTables(x)
ls()
mergeCompatibleTables <- function(x){
print(ls(pos = -1L))
mylist <-   mget(grep(x, ls(), value=T))
mergedDF <- do.call(rbind, mylist)
return(mergedDF)
}
mergeCompatibleTables(x)
search()
mergeCompatibleTables <- function(x){
print(ls(pos = 1))
mylist <-   mget(grep(x, ls(), value=T))
mergedDF <- do.call(rbind, mylist)
return(mergedDF)
}
mergeCompatibleTables(x)
x
mget(grep(x, ls(), value=T))
mergeCompatibleTables <- function(x){
print(ls(pos = 1))
mylist <-   do.call("list",mget(grep(x, ls(), value=T)))
mergedDF <- do.call(rbind, mylist)
return(mergedDF)
}
mergeCompatibleTables(x)
mylist <-   do.call("list",mget(grep(x, ls(), value=T)))
mergeCompatibleTables <- function(x){
print(ls(pos = 1))
mylist <-   do.call("list",mget(grep(x, ls(pos = 1), value=T)))
mergedDF <- do.call(rbind, mylist)
return(mergedDF)
}
mergeCompatibleTables(x)
mergeCompatibleTables <- function(x){
print(ls(pos = 1))
mylist2 <<-   do.call("list",mget(grep(x, ls(pos = 1), value=T)))
mergedDF <- do.call(rbind, mylist)
return(mergedDF)
}
mergeCompatibleTables(x)
mergeCompatibleTables <- function(x){
print(ls(pos = 1))
mylist =   do.call("list",mget(grep(x, ls(pos = 1), value=T)))
mergedDF <- do.call(rbind, mylist)
return(mergedDF)
}
mergeCompatibleTables(x)
mergedDF <- do.call(rbind, mylist)
grep(x, ls(pos = 1), value=T))
grep(x, ls(pos = 1), value=T)
mylist <-   grep(x, ls(pos = 1), value=T)
mylist
test <- get("visitorsActivity1")
class(test)
mergedDF <- do.call(rbind, get(mylist))
get(mylist)
mylist
test <- rbind(get(mylist))
test <- get(mylist)
test
mylist
?get
test <- mget(mylist)
mergedDF <- do.call(rbind,  mget(mylist))
mergeCompatibleTables <- function(x){
print(ls(pos = 1))
mylist <-   grep(x, ls(pos = 1), value=T)
mergedDF <- do.call(rbind,  mget(mylist))
return(mergedDF)
}
didit <- mergeCompatibleTables(x)
mergeCompatibleTables <- function(x){
print(ls(pos = 1))
mylist <-   do.call("list",grep(x, ls(pos = 1), value=T))
mergedDF <- do.call(rbind,  mget(mylist))
return(mergedDF)
}
didit <- mergeCompatibleTables(x)
mylist <-   do.call("list",grep(x, ls(pos = 1), value=T))
mergeCompatibleTables <- function(x){
print(ls(pos = 1))
mylist <-   do.call("list",mget(grep(x, ls(pos = 1), value=T)))
mergedDF <- do.call(rbind,  mget(mylist))
return(mergedDF)
}
mergeCompatibleTables(x)
mylist <-   grep(x, ls(pos = 1), value=T)
mylist
x
remove(mergedDF)
mergedDF <- do.call(rbind,  mget(mylist))
print(mylist)
mergeCompatibleTables <- function(x){
mylist <-   grep(x, ls(pos = 1), value=T)
print()
mergedDF <- do.call(rbind,  mget(mylist))
return(mergedDF)
}
mergeCompatibleTables(x)
mergeCompatibleTables <- function(x){
mylist <-   grep(x, ls(pos = 1), value=T)
print(x)
mergedDF <- do.call(rbind,  mget(mylist))
return(mergedDF)
}
mergeCompatibleTables(x)
mergeCompatibleTables <- function(x){
mylist <-   grep(x, ls(pos = 1), value=T)
print(mylist)
mergedDF <- do.call(rbind,  mget(mylist))
return(mergedDF)
}
mergeCompatibleTables(x)
?do.call
mergeCompatibleTables <- function(x){
mylist <-   grep(x, ls(pos = 1), value=T)
print(mylist)
mergedDF <- do.call(rbind,  mget(mylist),envir=1)
return(mergedDF)
}
mergeCompatibleTables(x)
mergeCompatibleTables <- function(x){
mylist <-   grep(x, ls(pos = 1), value=T)
print(mylist)
print(ls(pos = 1))
print(environment())
mergedDF <- do.call(rbind,  mget(mylist))
return(mergedDF)
}
mergeCompatibleTables(x)
mergeCompatibleTables <- function(x){
mylist <-   grep(x, ls(pos = 1), value=T)
print(environment())
print(mylist)
print(ls(pos = 1))
print(environment())
mergedDF <- do.call(rbind,  mget(mylist))
return(mergedDF)
}
mergeCompatibleTables(x)
mergedDF2 <- do.call(rbind,  mget(mylist))
mget(mylist)
mergeCompatibleTables <- function(x){
mylist <-   grep(x, ls(pos = 1), value=T)
print(environment())
print(mylist)
print(ls(pos = 1))
print(environment())
mergedDF <- do.call(rbind,  mget(mylist))
return(mergedDF)
}
mergeCompatibleTables(x)
mergeCompatibleTables(x)
do.call
mget
?mget
mergeCompatibleTables <- function(x){
mylist <-   grep(x, ls(pos = 1), value=T)
print(environment())
print(mylist)
print(ls(pos = 1))
print(environment())
mergedDF <- do.call(rbind,  mget(mylist,envir = as.environment(1)))
return(mergedDF)
}
mergeCompatibleTables(x)
mergeCompatibleTables <- function(x){
mylist <-   grep(x, ls(pos = 1), value=T)
print(environment())
print(mylist)
print(ls(pos = 1))
print(environment())
mergedDF <- do.call(rbind,  mget(mylist,envir = as.environment(1)))
return(mergedDF)
}
mergedDF3 <- mergeCompatibleTables(x)
mergedDF3==mergedDF2
identical(mergedDF3,mergedDF2)
mergeCompatibleTables <- function(x){
if(is.character(x)){
mylist <-   grep(x, ls(pos = 1), value=T)
mergedDF <- do.call(rbind,  mget(mylist,envir = as.environment(1)))
return(mergedDF)
}
}
mergedDF4 <- mergeCompatibleTables(x)
x <- test
mergedDF4 <- mergeCompatibleTables(x)
is.character(x)
mergeCompatibleTables <- function(x){
if(is.character(x)){
mylist <-   grep(x, ls(pos = 1), value=T)
mergedDF <- do.call(rbind,  mget(mylist,envir = as.environment(1)))
return(mergedDF)
} else {
stop
}
}
is.character(x)
mergedDF4 <- mergeCompatibleTables(x)
mergeCompatibleTables <- function(x){
if(is.character(x)){
mylist <-   grep(x, ls(pos = 1), value=T)
mergedDF <- do.call(rbind,  mget(mylist,envir = as.environment(1)))
return(mergedDF)
} else {
stop()
geterrmessage("The input is not a string")
}
}
mergedDF4 <- mergeCompatibleTables(x)
mergeCompatibleTables <- function(x){
if(is.character(x)){
mylist <-   grep(x, ls(pos = 1), value=T)
mergedDF <- do.call(rbind,  mget(mylist,envir = as.environment(1)))
return(mergedDF)
} else {
stop("The input is not a string")
}
}
mergedDF4 <- mergeCompatibleTables(x)
mergeCompatibleTables <- function(x){
if(is.character(x)){
mylist <-   grep(x, ls(pos = 1), value=T)
mergedDF <- do.call(rbind,  mget(mylist,envir = as.environment(1)))
return(mergedDF)
} else {
stop("Input is not a character string")
}
}
ls()
?sapply
devtools::use_build_ignore(c("data"))
devtools:install
library(devtools)
devtools:install
devtools:install()
?install
install("AutoAnalysis")
getwd)
getwd()
install(AutoAnalysis)
install(as.package(AutoAnalysis))
install(as.package("AutoAnalysis"))
installas.package("AutoAnalysis")
install(pkg="AutoAnalysis")
install(pkg=".")
install(AutoAnalysis)
install("AutoAnalysis")
install()
devtools::use_build_ignore(c("data"))
install()
?install
?reportsRetriever
f <- devtools::build("AutoAnalysis")
f
f <- devtools::build("AutoAnalysis")
R CMD INSTALL --build
getwd()
install("AutoAnalysis")
install()
devtools::document()
library(AutoAnalysis)
devtools::build()
devtools::document()
library(AutoAnalysis)
devtools::document()
library(AutoAnalysis)
library(AutoAnalysis)
devtools::document()
library(AutoAnalysis)
?bindTables
bindTables(a,b)
install.packages("AutoAnalysis")
install.packages("AutoAnalysis")
library(AutoAnalysis)
bindTables(a,b)
AutoAnalysis::bindTables
AutoAnalysis::bindTables()
?AutoAnalysis
??AutoAnalysis
AutoAnalysis::bindTables
library(AutoAnalysis)
library(AutoAnalysis)
library(AutoAnalysis)
library(AutoAnalysis)
library(AutoAnalysis)
library(AutoAnalysis)
library(AutoAnalysis)
df <- tibble(
a = rnorm(10),
b = rnorm(10),
c = rnorm(10),
d = rnorm(10)
)
library(tidyverse)
df <- tibble(
a = rnorm(10),
b = rnorm(10),
c = rnorm(10),
d = rnorm(10)
)
df
?tibble
df <- data.frame(abc = 1)
df
df$ab
df$xb
df$abc
df$c
df$a
df2 <- tibble(abc = 1)
df2$a
library(tibble)
df2 <- tibble(abc = 1)
df2$a
tibble(a = 1, b = 1:3)
tibble(a = 1:3, b = 1)
tibble(a = 1:3, c = 1:2)
tibble(a = 1, b = integer())
tibble(a = integer(), b = 1)
x2 <- c("Dec", "Apr", "Jam", "Mar")
factor(x2, month_levels)
library(forcats)
factor(x2, month_levels)
parse_factor(x2, month_levels)
x1 <- c("Dec", "Apr", "Jan", "Mar")
month_levels <- c(
"Jan", "Feb", "Mar", "Apr", "May", "Jun",
"Jul", "Aug", "Sep", "Oct", "Nov", "Dec"
)
parse_factor(x1, month_levels)
factor(x2, month_levels)
parse_factor(x2, month_levels)
?lapply
seq(1, 9, by = 2)
x <- list(a = 1:4, b = letters[5:7], c = 8:9, d = letters[10])
x %>% lmap(maybe_rep)
test20 <- RSiteCatalyst::QueueRanked(reportsuite.id = suite,
date.from = "2018-03-01", date.to = "2018-03-01", metrics = c(),
elements = c("evar15","evar15"), classification = ("email"),
top = 50000, max.attempts = 500, enqueueOnly = F)
library(RSiteCatalyst)
SCAuth("fslglobal:Freescale","68f1b89da0fcc1164bf0b594fb95e9c7", company = "freescale",debug.mode = F)
test20 <- RSiteCatalyst::QueueRanked(reportsuite.id = suite,
date.from = "2018-03-01", date.to = "2018-03-01", metrics = c(),
elements = c("evar15","evar15"), classification = ("email"),
top = 50000, max.attempts = 500, enqueueOnly = F)
test20 <- RSiteCatalyst::QueueRanked(reportsuite.id = "freescaleprod",
date.from = "2018-03-01", date.to = "2018-03-01", metrics = c(),
elements = c("evar15","evar15"), classification = ("email"),
top = 50000, max.attempts = 500, enqueueOnly = F)
library(purrr)
1:3 %>% accumulate(`+`)
?accumulate
1:10 %>% accumulate_right(`*`)
1:10 %>% accumulate(~ .x)
1:10 %>% accumulate(max, .init = 5)
library(dplyr)
library(ggplot2)
rerun(5, rnorm(100)) %>%
set_names(paste0("sim", 1:5)) %>%
map(~ accumulate(., ~ .05 + .x + .y)) %>%
map_dfr(~ data_frame(value = .x, step = 1:100), .id = "simulation") %>%
ggplot(aes(x = step, y = value)) +
geom_line(aes(color = simulation)) +
ggtitle("Simulations of a random walk with drift")
GetReport
edit(GetReport())
edit(GetReport
)
GetReport2 <- GetReport()
GetReport2 <- GetReport
class(GetReport2())
class(GetReport2)
environment(GetReport)
environment(GetReport2)
edit(GetReport2())
edit(GetReport2)
GetReport2
edit(GetReport)
GetReport2 <- function (report.id, interval.seconds = 10, max.attempts = 3,
print.attempts = TRUE, format = "json", page = 0)
{
request.body <- c()
request.body$reportID <- unbox(report.id)
request.body$format <- unbox(format)
if (page > 0) {
request.body$page <- unbox(page)
}
report.data <<- ApiRequest(body = toJSON(request.body), func.name = "Report.Get",
interval.seconds = interval.seconds, max.attempts = max.attempts,
print.attempts = print.attempts, format = format)
if (format != "csv") {
report.type <- report.data$report$type
}
else {
report.type <- NULL
}
print(paste("Received", report.type, "report."))
if (is.null(report.type)) {
report.parsed = ParseDW(report.data, format)
}
else if (length(report.data$report$data) > 0) {
report.parsed = switch(report.type, ranked = {
ParseRanked(report.data)
}, trended = {
ParseTrended(report.data)
}, pathing = {
ParsePathing(report.data)
}, fallout = {
ParseFallout(report.data)
}, overtime = {
ParseOvertime(report.data)
}, summary = {
ParseSummary(report.data)
})
}
else {
print("Warning: Your report definition returned an empty data set.")
report.parsed = data.frame()
}
if (format != "csv") {
if (!is.null(report.data[["report"]][["segmentID"]])) {
report.parsed$segment.id <- report.data$report$segmentID
}
}
return(report.parsed)
}
environment(GetReport2)
